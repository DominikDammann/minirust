UB: load at type Enum { variants: Map({0: Variant { ty: Tuple { fields: List([]), size: Size(1 bytes), align: Align(1 bytes) }, tagger: Map({Size(0 bytes): (IntType { signed: Unsigned, size: Size(1 bytes) }, 2)}) }, 1: Variant { ty: Tuple { fields: List([(Size(0 bytes), Bool)]), size: Size(1 bytes), align: Align(1 bytes) }, tagger: Map({}) }}), discriminant_ty: IntType { signed: Signed, size: Size(8 bytes) }, discriminator: Branch { offset: Size(0 bytes), value_type: IntType { signed: Unsigned, size: Size(1 bytes) }, fallback: Invalid, children: Map({(0, 1): Known(1), (2, 2): Known(0)}) }, size: Size(1 bytes), align: Align(1 bytes) } but the data in memory violates the validity invariant
