fatal error: UB: load at type Enum { variants: Map({0: Variant { ty: Tuple { sized_fields: List([]), sized_head_layout: TupleHeadLayout { end: Size(1 bytes), align: Align(1 bytes) }, unsized_field: None }, tagger: Map({Size(0 bytes): (IntType { signed: Unsigned, size: Size(1 bytes) }, 2)}) }, 1: Variant { ty: Tuple { sized_fields: List([(Size(0 bytes), Bool)]), sized_head_layout: TupleHeadLayout { end: Size(1 bytes), align: Align(1 bytes) }, unsized_field: None }, tagger: Map({}) }}), discriminant_ty: IntType { signed: Signed, size: Size(8 bytes) }, discriminator: Branch { offset: Size(0 bytes), value_type: IntType { signed: Unsigned, size: Size(1 bytes) }, fallback: Known(1), children: Map({(2, 3): Known(0), (3, 256): Invalid}) }, size: Size(1 bytes), align: Align(1 bytes) } but the data in memory violates the language invariant
